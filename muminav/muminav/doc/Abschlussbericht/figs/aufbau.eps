%!PS-Adobe-3.1 EPSF-3.0
%%Title: aufbau.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: --
%%CreationDate: 9/20/2002
%%BoundingBox: 0 0 582 497
%%HiResBoundingBox: 0 0 581.7603 496.7999
%%CropBox: 0 0 581.7603 496.7999
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: aufbau.pdf 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -496.8 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 496.8 li
581.76 496.8 li
581.76 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
582 0 li
582 497 li
0 497 li
0 0 li
clp
.359863 496.439 mo
581.4 496.439 li
581.4 .359863 li
.359863 .359863 li
.359863 496.439 li
false sop
1 1 1 rgb
ef
.720001 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
.359863 496.439 mo
581.4 496.439 li
581.4 .359863 li
.359863 .359863 li
.359863 496.439 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: Arial-BoldMT Initial
11 dict begin
/FontName /Arial-BoldMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/hyphen 
<10bf317031d662871c21e4b24b45082f0229e121b5a5798a825a63> ND 
/A 
<10bf317079c9131fe82aed0960139938c7dd11f84d3486e157364ddfe73e
c1324c5f0a78446dd85572d81f76d5fdc971afc3b2e06bf4dc47bc679667
2b63> ND 
/M 
<10bf317020950cf8a7d65c5e0deb0edda2c46e3c0ac469cbe379c347b177
d8a11239e7ae93b4b60537ec6b28c7bf8485a496e157dff5416f3245253b
e0> ND 
/a 
<10bf31705d64e193f644676913533d4f242b6181368ed1350652c8cb7a6f
e958f60841a88d1088c20f893090b458ae087d16aa8691f1ae44882b0528
d32f3e9827d4294992e18a57652ae7d531994f09c8f3899ddffaad39408b
1529cb6c6e94b8c5c36f6038811d22f304b6662d870ece2886bb4e9f799a
c37faedbf994154341e467f29126a4c489a05c6fef9ee5143f581ea41499
e4aecea25c0711d5cc7b9f01a37e7c0b7e59d5ee83c610a480921138ec2c
f957d766614f6ccaa7ceb4e20fd6f9ac362e8c090b1abb9485ee8c51fdeb
7fc72063a72ab3373c0c6872cf9ba20b3513a2189f8a98cd5a1ee87742> ND 
/e 
<10bf3170599a82aebce2d0d9cd696e2d2232ae83b1d98ff884add96e0282
26fcd2cbd306888649029fbc75f18f771bf21f4d5f53f71cd70d56907fb2
0780ae57f65359db4c49ca929cb86ae96dd2f43742f720ffcefc0d1d3194
c72a55a6bfcf26d975c031741b09b969ea0410af02ae1e13b6c1d337a6b3
96eba6c714d73f9b5d2c2499a66a60f107d1dad4da56ef> ND 
/i 
<10bf317021cc67b2bc312fc6a7ad37016808b8c74342617d801906e8ad23
4c7210637a5c2e2ea339f24d0c> ND 
/l 
<10bf317021cc67b2bc31c11814793bc69b430b318ded78131a> ND 
/m 
<10bf31703bc84f280bc926798acdec2516269e7061028d385a31d255844f
a27fc6b4cdd6f6ba3dfabbbaadef207eca864f3bc97abd9a4f1b978df039
4779a47e3088a94b9cee6d3b276eef4d4950e88ef4a61f93e0b6cde961dc
7ec12956bd3a56a59704c6c5b5a401c3674bc856b6c34f276e7f1bc3056d
89b4805ca25b43894c427bc43b36554ede70476f7ee25d1a6c03ed9f5e40
5c72135defa96ede67a5a8ef5fea114c19a857db71952cb83f4d11> ND 
/n 
<10bf31702094fda2efce4110428b7f86f5f2073cab682ca78d0dc97da563
e3301b964801f725812f64cb67abc1e242f6d8dcd921f1fbf9e05fee92c3
cf16b5bf6083337a59bf026de7fa548a247b8bde12c672aa0ba0501ccc35
fcca587d7573f11dfc32a2ac31516847d39fb276060c6171da> ND 
/p 
<10bf31703d364b58d236360a3109f388a509dc9806d07d5bc445174ad942
7c9600246e60ea62f48529a60136f844b413bd7834b903aeb5ec3a65352a
708c943d46c286b502a39b69aec9bc15c2a1798b51edb224db01e94ff1eb
dbf1e97f7f79a2c4ac7f7ccc29f5a1c29ed2d05ed3e5ff111a8b097f8d17
72a84cce0bcd066f78e2de698d38b96a99a99313e7a6639d82> ND 
/t 
<10bf3170688ce4cb1d2f5bf487137bec8ecb87b4485146ce17824d997ac5
95ab4afb2e80a065a802ee3f010bb37eac91d0f6ed42677aa9dde7e1ad01
769b95b971dec6d1669588801bb2fb04109e79e9771f019783524f2f268e
35dce126a03e55d028a6951cc9b40e649071f577> ND 
/u 
<10bf317022f1ca2cc2a22c3ff97c1232bc55839582d9c5ff7e86bfa4508d
4c6c2a32b8a91c23bc7417819a6d61bb6c4ffa588f9ea417cfc189ff4ca4
86806cfbdc09b2f0ef54b54c53e50d4afcfcb2df030b19aa33138b0a422d
d58054461b41c9166e86f2fb1f6b43052b68dc3202c1cc> ND 
/v 
<10bf3170625c727453162c8fc1a6c3317db0654c8d1cf399154810b2ea75
644b7bf3ca097b70d6244faa15faeaddcd0f234039d4b32fccf18d> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/Arial-BoldMT findfont /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 65 /A put
dup 77 /M put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 116 /t put
dup 117 /u put
dup 118 /v put
pop
%ADOEndSubsetFont
/Arial-BoldMT*1 
[
32{/.notdef}repeat /space 12{/.notdef}repeat /hyphen 19{/.notdef}repeat /A 11{/.notdef}repeat /M 
19{/.notdef}repeat /a 3{/.notdef}repeat /e 3{/.notdef}repeat /i 2{/.notdef}repeat /l 
/m /n /.notdef /p 3{/.notdef}repeat /t /u /v 
137{/.notdef}repeat
] /Arial-BoldMT nfnt
/Arial-BoldMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
191.4 39.7197 mov
0.133438 0 32 -0.0720062 0 (Muminav - Applet) awsh
21.7202 184.68 mo
234.12 184.68 li
234.12 71.1597 li
21.7202 71.1597 li
21.7202 184.68 li
1 1 1 rgb
ef
21.7202 184.68 mo
234.12 184.68 li
234.12 71.1597 li
21.7202 71.1597 li
21.7202 184.68 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/hyphen 
<10bf31705995db6ed81c8e93e5d1d568f767c41aee4b2647d0> ND 
/L 
<10bf317026bbdb3a0b5fa193bb84a78137b0c1eca959bcd3e291fc955f> ND 
/M 
<10bf317027e82ad35cdddc2b5c741dc6db294c8b4a0d6704b3828695c903
74c6f490906b329d29d44205638a69fbd75880845cec3cf05cb08dd78863
8da26e9aec39bfd95b1a> ND 
/V 
<10bf31707d937b42ca5aa917fb8735867898e23266ce63f299decbd88902
a58f50d327fa84a3893c0fe3af9d5b8d8ece1349c10cbf> ND 
/X 
<10bf31707d937b42c54fca5dda78727ef448be491e9b9d5d91a50c7efd99
d0ee999d19f0e2bf4bd76aee307d9f692f9e1470f00e84833aaa0bb7fa70
73afb0abfa71cd65b9853f0b4a39c10202f95188e09017dd0c1cb258f2cf
f779> ND 
/a 
<10bf31705d64e193f9f1f8a567d03549fa73483ae9b672d7b7797200c526
6d55e0abf05d082c89da2ef3d2f91996aeea18b52bf494757c5251c9374c
9401f98b0cace0d4875f7ed6fd1c3b2afb70e988b112b201a9d47e0c13f4
1047852d209bb94beef969307b8c216c427c9903125ecb96a03389115b44
edc7e2e2478a1fd25f07acc3624f3ed1b5defe5adc0d2b5c9f2461afba44
82f331b79ca3a770e50164bc5ea7976dee8e016d390d83fcc1fa4202137b
503516f93235eba4c56226d091ad7f8be6c874f34a5fb2592031776db147
88325910cfdd12dfbef218194f528860b4df22c468e92140ddaed77110f7
ac35f3eb45ccb9aa77fa9fad75c6eb6c0fb7ca> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/g 
<10bf3170599a82ae9f38a9e935b4e0f3d7776326ecd8d725592828643987
c2e996bcd7d71545c3eb62141100b3029b5db47d5a1c74ff1f384da4be0e
6cf0ee7a06a6ed308265b547c61245dd74ea50abb0d2d3cd2399420ee06e
7956a28a86fe6b998b8722a5746802f533a367725615f062015db919f3df
3c1161274e44726519555c137d48159ae02477eb468fd9fc7a3d8570c8a3
e043f93c86fb8138e2b07c9d11fc45f70eb798bfa21ffadc315e7d76733b
5b2c49936a2059f2200afe935aa8ae6d77bf03212f2cde46> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/r 
<10bf31703e6aa4be08d01c511eaadd0473a3483c7b936ed6e6cf91cffcbd
a815b8df60ae150c20432c17a46c0682480f6226770a8905e960aec3fe5e
934f4cc994b08abf0fc9d432168086e4> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 45 /hyphen put
dup 76 /L put
dup 77 /M put
dup 86 /V put
dup 88 /X put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen 30{/.notdef}repeat /L /M 8{/.notdef}repeat /V /.notdef 
/X 8{/.notdef}repeat /a /b 2{/.notdef}repeat /e /.notdef /g 
/.notdef /i 4{/.notdef}repeat /n 3{/.notdef}repeat /r /.notdef /t 
/u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
30.6001 135.24 mov
0.0239868 0 (XML-Verar) ash
146.858 135.24 mov
0.0240173 0 (beitung) ash
354.6 482.28 mo
567.24 482.28 li
567.24 71.1597 li
354.6 71.1597 li
354.6 482.28 li
1 1 1 rgb
ef
354.6 482.28 mo
567.24 482.28 li
567.24 71.1597 li
354.6 71.1597 li
354.6 482.28 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K 
<10bf317026ba62062704f9ba87c1ab1fc7730cdfdacc88df1e45004269f1
b43137c9251fe2841c5423281c9858682237f26a47da9c17460f> ND 
/l 
<10bf31703962bf7b2e903c47f674adcdf4f2bfaa638a> ND 
/o 
<10bf31705e921373942a1df751ebc6db4ec72c05404f7de2844dacd3e4cf
31126a38f288b6ae9b7d8f2dfbc6da8ac0d7c81b1e33f3b0d42a36c4711f
eaf8cb9fa6d4a4a92b6ac2214800466fb64367d9087f85fe66540f2cdace
637f2d8f1a779e763ea7643d7ab1f37b5e7c3da5a24dc2e927da3937c07b
4fef169bc767237647c3151dea42fc9d1c> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e
a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc
2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865
4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 75 /K put
dup 108 /l put
dup 111 /o put
dup 115 /s put
dup 121 /y put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen 29{/.notdef}repeat /K /L /M 8{/.notdef}repeat /V 
/.notdef /X 8{/.notdef}repeat /a /b 2{/.notdef}repeat /e /.notdef 
/g /.notdef /i 2{/.notdef}repeat /l /.notdef /n /o 
2{/.notdef}repeat /r /s /t /u 3{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
378.12 125.64 mov
0.0239868 0 (Layout-Kla) ash
493.112 125.64 mov
0.0240173 0 (ssen) ash
21.7202 326.28 mo
234.12 326.28 li
234.12 213 li
21.7202 213 li
21.7202 326.28 li
1 1 1 rgb
ef
21.7202 326.28 mo
234.12 326.28 li
234.12 213 li
21.7202 213 li
21.7202 326.28 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E 
<10bf317028198094ce8cd275e305c79a7a258ddd928bd9dc896c51a549b4
869242612fc9caa06c2483d03d9996ef> ND 
/Z 
<10bf31706d7ba414cb66243799e58f61aea1974ebc38f33626f74a454b35
669bfeebb966df351505664af97a383ba56d767a4ee1b2> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/h 
<10bf31703f932f5ecb68c849e33d1fed17c766a03dcb89fd4259247501b2
92adfc2297be69c7091e34ced000096d0ca29850717d0ee8abe567011317
96a4072dab7df40090735d5712990fb13b0847093cc929cc1cd64c87dd80
565b94c081eb> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 69 /E put
dup 90 /Z put
dup 99 /c put
dup 104 /h put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen 23{/.notdef}repeat /E 5{/.notdef}repeat /K /L /M 
8{/.notdef}repeat /V /.notdef /X /.notdef /Z 6{/.notdef}repeat /a 
/b /c /.notdef /e /.notdef /g /h /i 
2{/.notdef}repeat /l /.notdef /n /o 2{/.notdef}repeat /r /s 
/t /u 3{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
43.7998 276.84 mov
0.0239868 0 (Zeichen-En) ash
166.785 276.84 mov
0.0240173 0 (gine) ash
21.7202 468.12 mo
234.12 468.12 li
234.12 354.84 li
21.7202 354.84 li
21.7202 468.12 li
1 1 1 rgb
ef
21.7202 468.12 mo
234.12 468.12 li
234.12 354.84 li
21.7202 354.84 li
21.7202 468.12 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v 
<10bf31706ae07dd17dfbac8a1ae33180eda67f1c12c0170124c5b65d6008
42ef910f621d12aef7aac075b848d0659b626414ef71a4> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen 23{/.notdef}repeat /E 5{/.notdef}repeat /K /L /M 
8{/.notdef}repeat /V /.notdef /X /.notdef /Z 6{/.notdef}repeat /a 
/b /c /.notdef /e /.notdef /g /h /i 
2{/.notdef}repeat /l /.notdef /n /o 2{/.notdef}repeat /r /s 
/t /u /v 2{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
55.7998 418.68 mov
0.000244141 0 105 0.0239868 0 (Event-Engine) awsh
368.76 276.84 mo
553.08 276.84 li
553.08 149.16 li
368.76 149.16 li
368.76 276.84 li
1 1 1 rgb
ef
368.76 276.84 mo
553.08 276.84 li
553.08 149.16 li
368.76 149.16 li
368.76 276.84 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [18 0 0 -18 0 0 ]mfnt sfnt
441 175.08 mov
-0.0360107 0 (Math) ash
388.68 241.32 mo
445.32 241.32 li
445.32 184.68 li
388.68 184.68 li
388.68 241.32 li
1 1 1 rgb
ef
388.68 241.32 mo
445.32 241.32 li
445.32 184.68 li
388.68 184.68 li
388.68 241.32 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period 
<10bf317014482feecab94451e2e92893e6ea1ac0> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen /period 22{/.notdef}repeat /E 5{/.notdef}repeat /K /L 
/M 8{/.notdef}repeat /V /.notdef /X /.notdef /Z 6{/.notdef}repeat 
/a /b /c /.notdef /e /.notdef /g /h 
/i 2{/.notdef}repeat /l /.notdef /n /o 2{/.notdef}repeat /r 
/s /t /u /v 2{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
401.88 215.4 mov
-0.0395966 0 (..............) ash
411.48 247.08 mo
468.12 247.08 li
468.12 190.44 li
411.48 190.44 li
411.48 247.08 li
1 1 1 rgb
ef
411.48 247.08 mo
468.12 247.08 li
468.12 190.44 li
411.48 190.44 li
411.48 247.08 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C 
<10bf31704fab892742fc2c6be78329c0825c84c392f40122153ca9a91165
96e2ea405597ca7f292098a14c92b8766b957d29536d6a74922bce6efa67
d7fa67d47a8ae997e897ea42f1e923c09a3ad5b1aa2186622859ef03a213
f7c26727c45c24d289e1bf8fa6a719352242839e565e8af9cb5c48758232
20530e01b09cb28b590a86024fb341940ed5d19a7e036981d38ceef64334
a577636f4f149330a371e1> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen /period 20{/.notdef}repeat /C /.notdef /E 5{/.notdef}repeat 
/K /L /M 8{/.notdef}repeat /V /.notdef /X /.notdef 
/Z 6{/.notdef}repeat /a /b /c /.notdef /e /.notdef 
/g /h /i 2{/.notdef}repeat /l /.notdef /n /o 
2{/.notdef}repeat /r /s /t /u /v 2{/.notdef}repeat /y 
134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
422.04 221.16 mov
-0.142563 0 (Connector) ash
446.76 255.48 mo
503.4 255.48 li
503.4 198.84 li
446.76 198.84 li
446.76 255.48 li
1 1 1 rgb
ef
446.76 255.48 mo
503.4 255.48 li
503.4 198.84 li
446.76 198.84 li
446.76 255.48 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S 
<10bf31704ab370a8a6c235279ed6c2ccfc716fa1295d141c34dd24f95c73
82e11c724a74e86021432ff58ab0f9585559c2cc7a3fe0720eadda5eee3e
cb055c76e8d7f22cfddbcfbe4ee1a562282b307d86efef90d9a8c71c96ab
9543712fa6240508ea1f38536804c47dfcc21f777c873fc11b7e20f7a228
b35e8d75f100a7da6082feb065d087853344b8bf00df7291cc74173d8c17
2964ca635a4e981f1604dc10d454f452e70073d386bcbe3ed4c09e72aa02
e7eb1e382ccb2fe70e1e9e3084e7824b4261723bffe42f4fc72d36ddcdd9
e884d10e18a55004b6149a9b0c7ead4b42afa8906a80deea322a930f4d91
ac35a6e6186e5d082f09> ND 
/m 
<10bf31703f92f56d921ff977e5d6963369571a0659b0c0d4b90a5d6fb9cf
6faeef66a6b161cb3d25beb050c083e79f2022ade1c13065af4f750db4fe
1ad2e1c991cb72a1a606eb51e0d41e91fb4441b42920d1b3a1093a55a67e
1a1fd7d653f510dbcf49e0790e917a5508d455454558a59585ba63bcbeb1
95200dede71b995b075a583acbe0294673e1e62af20184e1e4ef7c875961
9374c008bd7ea0a3f8> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 83 /S put
dup 109 /m put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen /period 20{/.notdef}repeat /C /.notdef /E 5{/.notdef}repeat 
/K /L /M 5{/.notdef}repeat /S 2{/.notdef}repeat /V /.notdef 
/X /.notdef /Z 6{/.notdef}repeat /a /b /c /.notdef 
/e /.notdef /g /h /i 2{/.notdef}repeat /l /m 
/n /o 2{/.notdef}repeat /r /s /t /u /v 
2{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
454.2 229.56 mov
-0.11087 0 (SubElement) ash
476.52 264.12 mo
533.16 264.12 li
533.16 207.24 li
476.52 207.24 li
476.52 264.12 li
1 1 1 rgb
ef
476.52 264.12 mo
533.16 264.12 li
533.16 207.24 li
476.52 207.24 li
476.52 264.12 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
482.76 237.96 mov
-0.142578 0 (MainElemen) ash
525.355 237.96 mov
(t) sh
368.76 425.64 mo
553.08 425.64 li
553.08 291 li
368.76 291 li
368.76 425.64 li
1 1 1 rgb
ef
368.76 425.64 mo
553.08 425.64 li
553.08 291 li
368.76 291 li
368.76 425.64 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: ArialMT AddGlyphs

systemdict begin
/ArialMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I 
<10bf31701a61e6f9a78e08bbc896e02c88ca268e19a5> ND 
/f 
<10bf31706629561882b73d5b02cebd16b0942e445fbe6e3232b3823cbdb2
63dcf8e5b5846268df4eba2210bb667f400c46f76ed43d4b268aed98cf98
689dff659a93d69b1917cc1e5f49aadef7d4b3b6109675927aeb98089c> ND 
/k 
<10bf31703f936777fb99983a11586419ce72aadc44a2aa69d19b91e9f126
e6f5aabcb4381bf8bfee294b80bae1d888f1314da01fbe02> ND 
systemdict /gcheck known {setglobal} if end end
end
/ArialMT findfont /Encoding get
dup 73 /I put
dup 102 /f put
dup 107 /k put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
45{/.notdef}repeat /hyphen /period 20{/.notdef}repeat /C /.notdef /E 3{/.notdef}repeat 
/I /.notdef /K /L /M 5{/.notdef}repeat /S 2{/.notdef}repeat 
/V /.notdef /X /.notdef /Z 6{/.notdef}repeat /a /b 
/c /.notdef /e /f /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}repeat /r /s 
/t /u /v 2{/.notdef}repeat /y 134{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [18 0 0 -18 0 0 ]mfnt sfnt
421.08 320.52 mov
0.071991 0 (Informatik) ash
388.68 383.16 mo
445.32 383.16 li
445.32 326.28 li
388.68 326.28 li
388.68 383.16 li
1 1 1 rgb
ef
388.68 383.16 mo
445.32 383.16 li
445.32 326.28 li
388.68 326.28 li
388.68 383.16 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
401.88 357.24 mov
-0.0395966 0 (..............) ash
411.48 388.68 mo
468.12 388.68 li
468.12 332.04 li
411.48 332.04 li
411.48 388.68 li
1 1 1 rgb
ef
411.48 388.68 mo
468.12 388.68 li
468.12 332.04 li
411.48 332.04 li
411.48 388.68 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
422.04 362.76 mov
-0.142563 0 (Connector) ash
446.76 397.32 mo
503.4 397.32 li
503.4 340.439 li
446.76 340.439 li
446.76 397.32 li
1 1 1 rgb
ef
446.76 397.32 mo
503.4 397.32 li
503.4 340.439 li
446.76 340.439 li
446.76 397.32 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
454.2 371.399 mov
-0.11087 0 (SubElement) ash
476.52 405.72 mo
533.16 405.72 li
533.16 349.08 li
476.52 349.08 li
476.52 405.72 li
1 1 1 rgb
ef
476.52 405.72 mo
533.16 405.72 li
533.16 349.08 li
476.52 349.08 li
476.52 405.72 li
cp
0 0 0 rgb
s
0 0 0 rgb
/ArialMT*1 findfont [7.92 0 0 -7.92 0 0 ]mfnt sfnt
482.76 379.8 mov
-0.142578 0 (MainElemen) ash
525.355 379.8 mov
(t) sh
368.76 466.68 mo
553.08 466.68 li
553.08 439.8 li
368.76 439.8 li
368.76 466.68 li
1 1 1 rgb
ef
368.76 466.68 mo
553.08 466.68 li
553.08 439.8 li
368.76 439.8 li
368.76 466.68 li
cp
0 0 0 rgb
s
0 0 0 rgb
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs

systemdict begin
/Arial-BoldMT 
findfont dup
/Private get begin
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period 
<10bf317021cc67b2bc301f516a49c5d2eaf38d05e04c6bb061> ND 
systemdict /gcheck known {setglobal} if end end
end
/Arial-BoldMT findfont /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/Arial-BoldMT*1 
[
32{/.notdef}repeat /space 12{/.notdef}repeat /hyphen /period 18{/.notdef}repeat /A 11{/.notdef}repeat 
/M 19{/.notdef}repeat /a 3{/.notdef}repeat /e 3{/.notdef}repeat /i 2{/.notdef}repeat 
/l /m /n /.notdef /p 3{/.notdef}repeat /t /u 
/v 137{/.notdef}repeat
] /Arial-BoldMT nfnt
/Arial-BoldMT*1 findfont [24.0029 0 0 -24.0029 0 0 ]mfnt sfnt
450.84 460.439 mov
0.0479889 0 (...) ash
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (--) (--)
%%Title: (aufbau.eps)
%%CreationDate: 9/20/2002 3:30 PM
%AI9_DataStream
%Gb"/LH]K,d[HIP$!q[KO=D/jd0?LA@\%GgnjDZ*XP,5S+M%\]2kTO.dN;8k1+^5HSh=pimWTrmh;UULU4$rY\)6m:LcVpaeq_TBW
%(p3P5fmIos>6"@W;oWFpB0h6q3HP5WK*QmnIoC9([cokJc2+uIQG0P\ge`(J02,NAccLLE?e2:6Mp6QODn"d"@_LGYc:3_,qL/,6
%l$Bb4qVc$m/Y8Nlao@MW^!V-\PFC"pjo4O[0s>6!kVIVG?D#LZp$$e/XEGJ`P:Omn?HBV1lCr`tEB2T7=\T_0=oEs'=3mHhl1pX;
%K\-.`A\HjGk%RkMq7cZFeD8d;/Ed$SIeTSjDJP\]o6n=KgESNq54LDmbPJ6m<4hsP7>&uIo\W#^R%;`FWr6BSX3''r<89XZA9ZA'
%:p]7iSgIA*:]=;`?dViKs*>%PDjqc5:tD&VXN^:q`<k\Rd_P%6FnAeV%dIF'hD?ku0KcD&=,Ufp1Q#;:qUE%aoP^XtRaTl.Z\"LA
%Mp198$T:1bEMn7IYCCeerLpB+od1aGE3jmOs+uc^(O=md>@u.pI95VD)gnu!e=1AXF5Vi_=iq%5>L2SgS7!?#FA_!j]27I9@uI[.
%F&DB3q:CNf%Y0k7Ve9B*QVXZ+ok'Zt/71WVW`Nj!5Ojn`2V>+,?0/G7Q014"`b/Hb:FTIpkNL?](]`C@^t@%e(PI7`2tMt'lEL=^
%YfaV-;-h_ADsHTT0o\O6=RC>YIe\kf:-IS[79'8,1S;(B*->6&5J60.dJ5<A?ecP#C:C6F&cF)Xfm(3K&`Jm8(tCGXh1ruG,!KkY
%n2$MSIh`K\/&%GCGu"+'%1R>H1kCsWm5Fi&gXbWdrHj1bXj/Q"\+L]OqUoVsbPp0'%VkM.`r-uas/K<^Rnn7]Ck%_@UCXat\$)iD
%SR%ju<kjJ%ce_sXF>MX.B@UlUs"XD2^lml+)1oZ4qrMaek/6SNp4ed9S_B92WdCW4Sa)Qjc2;<H,ICGq\f[:jlT(eQ)#bo-0j.6&
%+NTrtC0b[7eN;V0he;2YIqF<s!K,TC=*rWsce0830N[S@35QjY/EX!Z\'>cTC)/=dfjM@>H_YVM%Hsm2erKIq`GBp)D/^EnI5kH'
%f<:et(AmKZ.+ik;)CYQmg2++la6@.nG^Vd5/_9+RG-t;rZ>SEVO8X6m\GbNZVobbqFm.%D"Oq&5%A93)V&fW]U0_-l0!g=?4mIEk
%Ie[A<6j]P'=Z)\FT!qnsp[u/dWk"M^VsCC-Hkt<PRV"2;110G6c.ctFf?Z]!!8c%:>/YNP&TMR+Hb8;+=Rcm"4(+RD&QA^^&>J0j
%_jkhjVUb=ESe6OEf%JC!ih$?*<7C>$b\%':T<n?_HEjR_Aq.o63'M]f@m.MTn)s%b^5?#Z@`6+=qe?Cql*_LXF`LT\o-8D5NrHen
%J%2Lt7`LfhPs/DEd?p"-`*C\=iUNXZ8]Bq']re.2cZ.?Nk)73pCm1?pBk7TI9.;9i0N^$";N=OeFo-H_pPjI"2-HUF@O@f`-rR6R
%7TD(:H"_8*[]*5)$r.iKj/%i,]=oKV%5DG5OJAQARbN/3[>VK0*B%qW4BghQ?n-5K(MI&YTIgO#G\bbq'P6rkC(#%ScBYAB8SlaO
%e>5mI_/r9]7erV#_B5;%<[8f%fn9j'20l&N;%Z/N9i1aZA!t!f,-];V1,ET1kCZ:3C7G+EGkrrM-e7/fMBla6.YIuF!;JC,-HOXu
%L4Daq'LBOqFMJZQM8ZHXVWP-VC?U3kZmLs2#U[J7VE"-?;\-GAMBid]=K\Q"$'?[3dk9j8k4+9V&e`ZVHGjU'?[U9(D66dbpcZr=
%n2q$YT5M)W1]jd;nB=!UND1-V:*L^,!#/[Fi34t8lAQia!\LD&R>;(XgNApZCBJjB:+YnK+VrK1*@Ve^V*t.g/j1qdjN^`33Q\;.
%02""+"CWE-J3[>J"W\JF'fl>qku73#L@En7!1ts+Y(nVdIno+<;,eT2#jN\DTf8X(i<]]FPf6J+(Z("CI2f_FMRJCj.P-?uP-ASF
%%0LV<R^TknU7r-PeuSp=NM]\fS-2JrF'bZj3%[0]3>k2Q(En[5e^+N:n`^.6-hKb0J[,Cc5W1.rLM/6m^S8VD"?HGq,ig0KW2%5&
%3W9A:"id:?Zs@&Tk0no=7cPOtEHJWI0NMt%&lrLdGIVe`J?E,C<N$R*8C03G'.B$`#8ThQ7g8*;Q4+D)j(<"X:;pK>CB?-pQpZ'R
%Xpp/ElfrL1Q!pc!Sm1193lZ+lkWo:roZ3k$iP'jC6h^49Xck7G2?`ZmeJ(hWlN6iSlO+RN6kHlW%EAH:"o4=HH+J4>b#L8E!J/<!
%J[5o@G.:nh#^!XCAS$Sl'HmF'*t7`ci"I+h/mSV@FTbZt:mY`]?CDEj_ZeTk7kXP.J7W`eFO?N5dFo8I"2L;\(#6_=b1^*\T:g)c
%52k'3>S7I8.%*bU#L"S,l*2Jh<-TW&'>:lG&fr^[Q8eT1Eeu)&^>RG;/`iu#SbU5"fK/U7Xn%h'F227uM::O"a;cR.UnYt(^<YXm
%Qjn_+cdqU-B]GIAiU00iV25V3LB/XqN)e'`J.\`c^^.n1^^A7>FEK/&$n7Icmc_rHbVFJW('JS@o[Nf<e"_X(ppL0S(5jN[.=ocp
%*#D9rERuc:%#e0$4),C=G!%630Ajf]HdaP'45nUO'Wa!8;"U8""eq8)k5hXf(,1+C6DMUp/$*Xs`jS>$=+L&'H=JkR"MZ'u>/L&2
%$M+VCesta3+2E)6+TZ$a;%k#iro7js+p%`[jTn1Jo6nPh*?Cu/OFb[:WX>r6V,Z,U\;:B7P$XGLRX&0fN"*'_,%a72RD'R.?/cD4
%-#s0rQ94';V)ojdJH5'CZGnT4EY/i`ik^(Wj\5GgWJ]o*1SDg\.@i'Ogp-et?OL2F`Sr^qB5>kH5`j1g=>#_a69=.TZ@"s13VF?T
%H*]T&5uWZMe$K9qgEQ/4n4)=9pnA?eYAke#SWK=+66SX!`ERqE!LX[]RkKjURQG)5<.Y&Le*5lE,c8ot<13t1;arLIOAc=4i%#TK
%;^.:nUNEE(D[QRBm>im\2iiu6HC?`,Km>:(V!M6bdKZ&1R3'9NP/B[i,Uj#9,<]M-7ZAX^_f\6WG6C7!B!IR<WFqga$LmMS5IG.2
%FNd\iCOM$0*!%X/]9)=^0_>,;L1qSOG=o42$UEgt]NN6SN)2QA<f#!0C8_=[nkLWN]usBVLpm?o*t"qoN`3u^(;B4%<##QqZ*[$n
%@cTCeSCY"@O&%?:"W(=TJ5GMJ+X"Wjr(m_`+TphR`q\Vq*OpnkPS0Kcn^^'H+II`/ZZLsu&Zei_R&P3\&ma;Eo_+)N%iD"+HaT)I
%cpBYtD+$fG)CUdjdZskUH.nQ,7`?"FJjKT)6F;?<63#Ar8\KYq"7g:t]>4t586_/_@3K-SQVb2"JgX/dfdK!IO7F,rVdkeqX<FXd
%8i63=&FP/cd1\:IYS$90;utc7!R`e[4/deKc%$WAQ%t/9<Y_%-_VKcrmPTLZ3$8q\!3h&M0nLm+pC;EE5h^B6g,2]_K0^dN'L>&q
%&K1Xk)c^";ge*63.!CL$1A%tP1`@Ys^qpLt(pcm)oGer(C6U+Q!#7#h;-;?Q8rnj+ZAap-l),^]_:YHV[`Y42<*3<BXu[lm26fPB
%$,@(g'Oo=]07Y(-E[X41#G&f`T&oJ[,A_%TUl[&n9;*+PA2h@YA0`Aj%KZ[1@sMP#OVH]t3(.6)&_/9N<cR3)$s)Y=$3LFLM1?DY
%DGc9P(HF^9$H+W'!mPJC+JZ8W!7dfrDt,D_<+I#Yh+:=pCBd28G^d_)pg%8d$$<a@o9TENq7En\',I;k>?G<&]N$&;TkWj\]D54.
%&/tS\fpn.p>G_$M$"QnB#_DB"0\RB(Dg!A0F5tbeP,;[2'[Tl$/raC5DAkUa1uAJ+<Yc,0&NBT39LLI2+'N%19U[A_nlR9N!SfMT
%U?hQE$^cUXZsb:Q%.e)?'&@pk(JUI3)<n$AA)2+3\TR1=2ScO*%!ufM+J[^Mobu_j=-7LWe;N6^.\%:_YD!g@%XXHY[nXR"\3+OP
%/.+ESNqQrSo?DOm-rR5s,sY]qg(?jj)Pj):7AKuJ!O^Hsc5iX^!eO87eB`9'aTpa+V`jC%K+#p)&5e8hkL/dYFTNhf.<fOpDfS(L
%pQlrW^IP-r8j%2sl`94UKI7.<@/_Kuj_j2%CRo^Zo\]VMXuk)QqnHB[s5gihpN53lc$u_Yma+Z5'gnK>-q5-u<2$1bFd-%O<;a^Q
%3lN_+V%f.r!$SX,,nY#eIlB<W3=q[fB.CHFnl`ct%_k8*XPeq5C>aFPpJ#)K+J?Z>^iD$393rgB+ZLrk-]mg$g&ODQnDV^/ih^+X
%;R,I-<bHZ$i&?K^D`GfpZma#F,eJ=Bbrhe<Yt;ML%1*rDjj0q$##U&!`B,KpUpb'DUQI7u_8BYYJsiIZff9-R<T2U:"hB^o/t[d.
%C)VV+O_!h%khq$##FcE0[V'Y>5,Vl=7o?V5:9jd5`97VH!p21]4?NWM-E=jW?jVG0Q9`6/S-0Ojk\/qcKR\mcC%06J"mo+%hc6o.
%a7uI+OjKu"7A=TM&jaH^R*0/tJnJM]*'50g-tP*"IuILq+Bj].(!U`eJ/&;97I7OtmVECJ1XC[>;@8,&QpS8MP,HN@\j^9OYsG;O
%/N82cZr;nfl(VApYH0AEG!?I1or9k5*]B&3dW\=R*o>/ABL`=!Y`Q;X!q8D=kV+ZqaqZ;nBkmphD#u=cMI^`\Rq?LSaFlYjPL860
%9$P78Xo6%0J86FaS@J"HTP`r,F%ah@b^DaAiA)%U;8I%&)pF6"S`bb:2&N)_.Z..gKXMHDj_[r7NRrc,E5!gqPLJoLi;cmi+b>r]
%*]]_+'Kk@$8VNPJ7.l#%Vj6(Yj6hG:_p_0q3d+7;o8^M07NAZ_3`:eo^^)4Z+laL<&6?tT9=jdZ30s0g`PI2qR9VMToMCl>,%*C)
%?%\LnU-n_*\NE3@Y+g]b&9b:`EKrOhDKZ2>Dq2[h;u#DXA8<mCi\:DL>]-;+b-LaB9Ybs&W$,<h5lkBW"S?):j\ID8IM?4D"msUS
%+;gMsVB'rlGX4P"#Vb<8(q]j+kenQrZ\SS1a7+^Z1K/gV_D0_u]2D`9mG)E4ojGND[DG1B)*jRBUsm1CS?;uun-)H!4idWS5jo'h
%%-B%%Q*=9.#Zi05(Q>k)K36R\;@g<L&$3fPF4hARL9u?<k\)[nJl$i?'.>;CN&5n'3\56<q20DH<&F3Q#??;U3R4C1D]4C$B]6Ph
%l(U&QR)aau3?OFsQH+/]6mR;N"Q=B)JF!j1Jm\[_XgNO#[U:TT'C]h5M/iZ.(_PFoU6tVXAY"5i`4m4'&Ah"2hC4a-)LlXDC^)LK
%cR?jB<.IDtis/stp0`H':ej.=YUTaI@?]8#7UBV/aK(T9!r)mLdl6'ogN,c,B`0Cn7r/Ka$Ou',qcb[.V3`;7_iAr[!@*:(AUkU[
%odh'sCl^t32?gN47]E&=a9YL[2i^Erhk[b%>g60N:Rhcba1X@aE?#<U!XX9/,^o_Ji&C^G^pb57$=&Gio-&g5jl1\TSSJ5b>XM*9
%-ts%AM;l\b`teM!*3S?*'B!uM>e%+B-"K.F1JgiUE,M?_39#]:-M1HA]7F[@+SOkNC^c$=$;J\X4e)HfiXLd>%#TlRR8,1pL1HX.
%ODAhJi>734!1?Q!)r9'^q\F%=ZB3gZjY2&jKN\(sj5:].KZi>j@_*Udg=Rnr6R`U.ps^M&UBnX1+r9-1"CVNMJX8s@VGKQD<'[S$
%JDiMr&f)`):kkAk,^f<p$@t,YF7?6"kTZ!m@Wm`f!tCUOE@@7MgOKV"[DKKU++)+\3RJ4iQn.G,:D\%B%*+U*#BNBq5UTl^n9buV
%Yj4ir&Z,_BLE@<fHRMg7NIe"R(X.cQHPm0QZnaFj)`b-c_4P&D"c=p5fht".gpuQ/B2m!;!0#Puj\,ttL51C%BlJbte.H/*E$Z4X
%T7Dc;>DOm8_Fa6PB*)L1&sC0QMb#aq<a!QO*7Qj2?p*XMKS:D)V]'bZVNMUmj-Od@(ls[kr`#V!dC4_[SI@FqYrHi@-,9W@\)N!i
%X-(eKRdfi.7b_16]Tf-?,@:OMJjbi4#>6s#!jZCqd&A2nUNt]Q0WASAH+H^T_5^#`/JS^#91X\i*GYL$(ro'ulpbfDZNcq4.]s'H
%F$>I$>X]rI&PAC%=-7+X)H^VcV$>8DBSmeg!eTQ__@1i((&PhjXUiK5M^^2IJj2R&[B9$S#'7bY[*5+%]L'sK2]mc^>XUuZi=d8$
%k5#3fI\]!>%cP+KmgglKTo\4R+b9?LD?pN;jkpruOpg>bVdi8hP8FiUnW#m&k*F&47td,c3"X(V$Fad'M!pX_b1j3RaMmQOQm&b)
%9I$e(J,jR').Xs'$h<@HG!hBThk1]q'.o%OLeO,j.uljCaVdAJ1f7;JN)Xo6d2>4gdie1&<QZ.U!$"6-D&W]`^MSpXFb6#X!'kr,
%;uC%)'4<;nRBNJ>h-PEt#E";1P:@mH'7NL+1##o7peNUi+g%!h10npV@QCqFMK^/5U&klP/h#+V&2OoG![Ao)!*S)L#!PBK,4Lj3
%%6p#s;k!i3"cGW>9dpZT0uh2<?6*T=M00"pKDIAkQ08;UkAUVkk.2F;COD%YF9j)%7bS)aKnplh)1eLB9>a<H\i_T#lT?^O0o]ZK
%YuNCF?OU6R(G:AB+donNXd%QG0KBUX&R(,D"P*`s#;M^)^G'$)lGS+p`"?cN.g/SiC#/k6%c^e#PQbD-KM'*ZaC[)kq@`'#67DP.
%/!fDR:"ih`K#MfMnJ[O=TX]eH\8ep0k/_1KW!j^jKGjn(X<MKe&Vu!X;$8:p)]pY%$1V@(?phdZ+:qma$%OV[YKtiDa/%?La/W44
%jN1083VJu'aiTB*:dHcDXBQn/BND:0PopVS^6Qe'+\2`uO]5_]5V,_OM9%BBhM?\>I/G^h$,S?#j`3l.+b;,2L@JhO%=\P8jesef
%d;7&;EZ[F\=_oZ93lagZHCFO;3-1_o6/TmbkUr[-7>rm8M^aSh!Vr9qOf+q73h;=71#BqF+/nq*fr4X3Z[KbZB]i\G/Nh)X2\eoA
%XYg^oL7el(>"V&u.27K74d8iDCiLsN&jt:b+tj"iBjft@M+A[/)MSCS020Fr5+G0N7C06o+Te>#QC8iO8W4/b0[C?-*EYc4cXH8p
%LMk#Z!^,WIP>s,E[Mc>9J.9`MG%6'T&:E0*"?A^)Bl4T(mD1!0j!I<)>0oj9DdkkeDUD)KSVbo1ULVBVDrl3Y.;k5tB+PLgdfOL]
%,pFAnN=.;U`CcpIU=):29T$S@64BRa)n(U$=E_(0)"O3C5#6EcZQ5<bF-u_knq&"+U3I4:!P7=)kSBhbH`ZBCE(V9<]bEiPU6Q>D
%V5K[e-n.h9$B!"\iGgYU.T0X#WZDQl@%]Z9\e*eHNh6mum9/#/*EWDaFjZ<rQK"=iTH%:TYbHW(72o>`]grW)>u=K&T4c:ImNTK^
%9[k3!.FCTRWImr6Kip=b$MtG1Ih^iIlX1&jL)LdY2jbPd#]umgJ]/,C)j!C<JEf7G8fnb`RQ7t_7[^c_4&Db@dtWd8)&,=?(/b8A
%KnE#2>RY]1Br&MfUN=PVMF!<InN:T3S6k:h.UJph$r4"s:1TWWC1JX9O-Mu+&AbGF#U15J'>h_IZVDZU#]^M&UD1iZS!b#@_"k6s
%"%=')Jt&[5J0U2P*/eQ#N_A!KRA`%,;4oOD+.l"QA/(fNV$:%G,#X3q()k#Yjq*Qtj@qFs56qP/G(_=4X'>F3lTFgk>XK5@_o`[#
%!g']CR^PJW,j$#%"3-5F)4F+*2T1Xg:&.cdF>,oJf-lu5b9']DgtdA$LM7cljggV-%WQ98j[7Ti]Z<0(pn?\,=Y0i-GgjJH,#<uA
%%mYKP4.>tT9]scCSYGpU!gMdYF9j2?S=I'>c]i8\]g+Jt$?4du,!2$[R$g2E7Gu"1JM%"b!+tnLPAoWkP:F't8@[SGNTb_#M\=m7
%@!Nk:A)d$W']oaP/<GEIA#;c-l(R;TTP)7gN+N)^,LJMg`MajQMAP9"J8\]IFK\tD#%L]X%\PRgHGCWIAiCr(I$bd\V?\J9ElLe3
%9$c8YM\$0uVm_EM/,"S%_"j#[kC?pU^EUO\ZHWRBh9tuOi*W"JnQms\ZOEc*87!GR^M-AuKmj?aJSB63\K\.f.n.l>b@F4smEUr*
%L6^NuZ!qa2K4Ju+S!G;Ibm2>"DTOm%FW#%H0Ofn4#aNilBGcH!cA#3DF'oZuj=o4@oC+3"KTfQtB;-Ud$=C.e'0uuNlJkS-19h75
%,KZjXS>V-O-sU=-KU14iga6eQ&aQOXE\N,"fsk2KB>!m[BH/8G@:k*L$$DbtG"-M$V\6n`8mi]7XFO[+&Ui.@UVp;W,gIUrct`).
%_WEBj18Zb0`NhbUg+]2<_Y"Y<.W;&AfO[jP[4/@>:9g^X"YXiZA1*ZmYph+3G"F/&9H##u:s+`EVBcO?6`$S?MG;4#2C3RlVIUT<
%NDr/40A4Ad42AS0XCklbkcnT^3so;'39:QCfTa6YD+`d6#^Mt>'Fgs*p^9'89:S=L(F2*`->@/Z3:PulL2dCM-:TDQG"&-E\nF6m
%P+s3-J5]$<`[t;K\J8NZabeAE6EHO`1hWQe_)$(9a>FTe*DR$1Yp/`$/DErhm)"<6%`Wk;9]>=GL'cb7f%k7b0hT5GJohPDF4=Z,
%>)ie@((oT7+LHm=MEG/2jYMdX.'d^+F&%:"%RSm.=D:n:LV9AaVMV)TdlIV]d)fN4_aZEY31Z885:-2^35%4"gULKJGUL<8S=&91
%Y#]LZ*1KJ1Z\4eZ]q7cY'P/T&=1'<C@u2&Y$Sdfpk/i.b&Ap-`M8J3YD9+W\$-j3DRO.B"8ml]QLrLLH+JLfZ+X`-C2DeH\-L$4q
%*._NHU(+J&`hXg@nCnHOEKNM=)OHtfihF7*bZ7@l4Bu<P'+0/p.6n1Fir=Z?'/`2&_*V6L=@>\oru@GX\_2Z$"09Q]7kuY-,R/$)
%gq#g_P`(*@E*,LQ8^'g4lsL(90liqU'.`NN`*C8Z=O-1PJ(g!;$[slsaP!g.?7#.bc2`07aVJi#j@HYB39-_(MdBGa7Ti,S&%$S+
%?T:PLkb%!V_Z^t_QnUmLbMq?g"6DS,).o"f&5@+7dZ:c":*BhD'Pt@5FB_qjkDtuK6pFb#c('/NRLr5'$KIBMVV%9Q9XbkW;HHC3
%Um-ldUd^c9l'-.n@ju'j1_S112&=Y3>r63O.1(GQ',L3s>@Vu1mo(lOA91>K5sfsW>YPSZA.(d6&`-n4C(Y^>#)maKKEl+&Rj)H]
%fkd'fTsb4gF=OSP/&hd:^;MQqjQ.i$jLf];&iQbAhbaGjSnD@X9V5Idk@c03+'feiOspmN&Th+PQ5ddo1TJgmkF#T8;i=#04UI6>
%FA">o'1o#+;$,kNN;^V<$$<O,UoTgZEg5dF!6H&7AAL09=dV0UZ!bZZ.iLS`4gf+2JMkEej>*c6I)[2eNK7V!V6GcY2)&r)!R%!]
%odBlg+;ak;-uu!f4GIC`3T#iAQe6'l"daD62NP"dRut6k/4;J):V]L+fIb'h_.C=c*+m-$;PAB)@rqH_,=mXLJ8"H2QnIXVS6%Cm
%m6T<U8Pk#5g2ub#:)j=_Zq@1u`4>.-Sd\@q(7G<f4hkJ3oFJ,Ri$;$dd,BL%5g&KY"J[#:E/<9q4)9/I-To3fQUJi>Km8l/AOFAR
%.d9f\p<IhReHAS<QlKm(7IX\+$WDKh%2XY^7M6[PK9ZI5<ce_"<_5c\!'?aeZu[.p4jjk:n@^2Pi-.fPCJs_4)?FZXoQTVc4:XWB
%>QOf.PWY.-nsmdT*\iE#*G"8OJt6Ve+]40B-6.Vrd->,?Hq6T19pV)^dc=$@$T(@Pq#CfWABEM%RYepn]u5%8FQ0+4;:B6Lo"hgL
%#OW\u"Amb@O\E[.s7ff/)H-IB]U2A#/*%<;("edei('"pFi1)ndF>o4lZ9f);dAd4FEn%1go+fL1JA*t>2Fh!+6ul-A_li=foq:F
%#e.mHe>\p5h87Rm32'2.h$ATd5J[[BSODW(Cn/mdNoXpj+'R_kY,6-!O>#86dt7),9iIt:9akTI4BKR9_`:Zee?N[pK'Nrrbg@D+
%RrR2#5,lm:-6;O<m5i<9*@3sk0>ulkmDZ!S>SYONQ+?[4Y3m]A*Qpd7]>AWCpS<Kaa[3ZANE]qeqU5ZD_NgWO%XZ/BIG,s#l9n*E
%_2b+H_d7kAB[AIjkfB>i-#]G:edp+<%6but<U^@$PXLRp,^u5Af*E!BdttkdX,L+d-N=__W"5f=Z3ZY?q1QfNBL`M6L@Q#>b'%-E
%bO<]PkOG[bhn_N4pr@isX1._K;.l^I>\pFL2<(r(&'h4m4a=;8'<@GQft#V_MoGU/45\HjB@Xsi]nmj'Hn_+0VYfJE7K)9)Wo!(p
%fDBEmRLNRuX3GrJ\Cf+D4SGLuZPu$!^oAMeUOpMGnn*>j\SJ)'VWj"$3o<m'DEskn[[2VmaWJ.j@TF"_Rqc!a"kkfcp;WoVH!Lqm
%leS;lDWahh#Ci/dlOE6+Rgle/1Sfl]J\502q@:o)KCd@aqg*BkD:itm8F6XQjG[SdAoHtrHprel9A*^X^6h]s`G3(*>e[h]XB1#`
%aY[5U>!3fUX!s@BO`qLH/bWE6\_dm?5HM>@!nr%8)=/t7FkqGGVYaX^=RI@0%Cg;1<+6nc>0fabWbA4$WpN([>#sDBI_dNa$9\7,
%^=lC*'JHN+)jqpODW1:1$lKM93\<,t4/Y(Qp^WeL&$^]%E&&9N,n)-UI5'X*aA_MKT/?M<8?4*n`KO&d-V^)PmW.eS:IrAcQO_?<
%_t-WYkH^uJ9u#e=Z(#)Ph@6&p(VklGdtYT%cJNe+J(sVlM`a,6>]0mPnG`(qU"XZdai%35:Y"]8aja<H8B'MclG5<.UR(>UN*`ua
%BrJW-2j[QdBf5?Q0lPdq"HJa@\<c:C[&.uD_`B\iqT\/@kGSr"m%s#SB%gTrcbAZ8:*/j@)"1AqrHi/jH-<_pj6O&=IT\n\^*Z85
%^6Le-ZH(YaPZ-J8i.![VF\TT`]T_@AYP/]YC1uSZAm_0Mp@@#d9J>A=rq>b:Ff`+P^@'`.67.(S.sOAC]]6'i2%a/[NE4jN?Z(B+
%GRqX.Dc`uS=jOC3=I#jUp[9-'KrgZ$Ak\Wmp\fH:Vl,a-PLK'dk]D&QSee6_e=X<NHYQ=KWB/9OVj#6`A29a8-GrD8.4/K_-Z3B@
%AtgYfP+S899MS>X`[@OFiCS;mgqS%G:Afr1Yp\[%T;[s$HodjX:WDGbBKR9$j'j"JIdG'tCrUe&`qeh?1`;jC`hUpp3%@G;.#e)F
%NU4`FoLOu4qtGiC_o_CY3$+*7_dPPVL10;$DJ4f;W/#,TQ`&r@4=S>4W#V+7=d5WPV(6Cs8mSGP02@EsEDhaR;)'WEU-M%Ni<r`>
%_A'RX7354A,b0O-(klBH6P2jN#VM3T&2\D&gn4G"5Oi5Jnj?d\Ju!JVS[[I;oM+U7.IsBSi_J:]NSMmGY&M4&kF?\7Br>3R:[Q)l
%fWcIMTe1+iKD!euCQ6kFg"`*dM)d;#1GV<rRY'FUl&@LM(o%Q18q!]eqF$D;8.TjB$QZV+:0VSB-D`_(VeVr$e6%^[:mJ%W6$_Q_
%/N:W88a*a80;mjSks4f::-d!:gUYXEBfQWo/,WMbs1qp/+1rX$j(>\rhU"]60+%5VGH+,:+=)GRT/RL03]`,=8sl2H[B8\fGH^aL
%`95bKo/$<;_X?4]5BnpXC:4%L`S[uAK^@U0g^u!;2RC.]ap.dPNW5Y@0B^NZ7GY>nZfeX!p'2%5<N,^?<Mpq!GVql`oBdR4rK0^%
%Vn*s@7sgPMpU<8Sh5=oC!"q+"h5\;LMADe3EW9?'32tf.^l,*"GF&5J(qce<joEZFj=ees0(.k_GOVA/562*M*k[ls^\;3e:>$&'
%2g@P5H/^lD%lYhPIc:+&>TUV,[le"N0[tSFoeb=Gg0ZU&nbU46cW"u!^O!23Z_m]jlSYsaea>13/P*b550@?j&Am^[HF[Bge>qG5
%8[."KZs:rN$af+]lW<\Y7j"@R`1GNNQ-?VgD_JH'om5$0p1t7Zm:sAher(K2NJPhkec&;:i_;;Bc"(o9n"0l\I@=li'aa$@=KX:>
%dpk1^eNU0tc?Q/$TBjbr5LoXhgWWG[5(IrqlBbTF:W.F;c?fHBm3Vri8Hg;l-@<:qn*4L/%#pkp\Yr('qIs#Dp^&$gM@QPT%_(+%
%;%)ZZal?uf5Q%DcQLp6-./4#q-*(iXWnX.Z&">_JE@\9`9q$!e/[RPr;SL\-:D_QYDO8ORdq@G8I2=c(Qh9T(-e5@$rtqO=ct[s!
%:[qXIe`L/=GkLFffBZQkh]DcX=_phI?`^on_]P5@$-h`Vrdj_5#]/G8lf/H2<f;B@;.bG.2"A!:Gca\f9VNN`I<99CbBd77BEt/=
%($ZU=i[lS_ebK82s0V`@<q:MejS+DL(N$5;,nX2+mSg0U(u8muoP?<J-[fYI)h/Isgt:+d,!%!ui6M6.cMA#t]<Q<s]>\M,rm0-g
%oop<QHMPO,>'H=9rrpH+[W:_ZpsJ-2\(i@fjRmfe&mP0m>@QkN`smV&iUYS/SW<g^5!E_S5$,7:2ffBr(@15Zp$<G5?*.2sK?(`S
%PA(]F4`9&/DLDHXl1P\#!J^!2+9&\'FM!o9s1MM`n*&kZ^R<[NPG+W=k&.9uh8`SH5Bo6aVQL],ffaTS*mXTO4iQ<!r>[chj7,k6
%9.k.&=G?#Fr;+V"\@&i%A)"VsiKF'4rbUirTgW_4B=P^`M.7Je?ggMsI9OD=amY\T!_9T5BYFE#p3=*.c\lcVGPcUCgRjdCICa9;
%X<h-5*R_G#T#2pe<c*$ClY86!VYoc*.bcfNh+*r@D!GV<+)QD^SgPKp`V\ETc5Jn#[(D'R2Ej?9fSAj3+<;Be2UuPh<JeKi@PaWf
%g\FWZUc_q2[(O7O*n/U"I_id]*SV^H1D3!\HG8:q^"M:B0EBFKP$c[UJ&OE"d9Z)1XPR94XNLWffXM=C=kZtK4.BO#q`"7G/`tfW
%Fj"OsIG0HP/%V`m*Bdg*,TH/qlXkDOPd0Z_7[7V)j@>XF65sgpHWs9iF>E%0U0:9P!;'HeomXrt#.s`Ph(>+6G6k90f[5]0e&D6B
%c5u\E+#ARIXB-M0Ej_mUp#^+^Xl%^!/!r?O4%BjNXuE\5G2u?&_:S#/p#i?55HAog@Q%T`Wn(B459HP8@lEFUY9qb'eVeS_#P3&M
%;E$/2#jl>U!B[kkpa<epa/(i34H?@a]^Lu4+I0Wh:XALeHT4$h&I.eSHb,([H$>3CI/DuX?m)RY;sQ(>YkY&9HM".Ak\E/mfGXGK
%LL95[;qW8Wqqn`m:Pf#Q6@"b.:PfaGUrsr)CsD]k/oOu(b4SEXWI*@$F1Q8t<4-"m<4+m8n)rBWR\&JTrXk;k1cgVq9HW\-6jd1-
%#A7uDh`H2$V9QgtWrohAF@_Rl_M@^Is5(M74XM?4Q],LhZC`@)l0Jii%<$,:T&$`Fmbd>ulte%O09u<Z[D/>c,edNr]=NC#5MtlM
%B5JM@',_<>N%9/GPe[3Os8<VZ_b`p<nnKFsi<dPlS:>p:s3CV&kk=B0bI$*33VT`<5W/L1bIciHIn7TSfnHdr>L;*qISL,q2PmFf
%6H7[r+jRu<qrN3*^!1lVn;=A-d>bKIdpaEu-W.df=&_5-Njl;VI$D>@o,UZo#Z;sjU4_'B1S+&)?[;H%16ar:q_D/8m8R7e"+28W
%:%tEJh<saP.cm3DP?"=Fo3[JW9jg[^U-MVi@2r1(0F:bS=96E*IS59R6;E)LId^)*VV7QloA+k<6*UCZ2a%=KPQHGupRRN*h@;P[
%>7R@rZ0l>(XpaZpo?k]Un+RoT;nDF[p2>*;lTEe6nd$9L2("pGqe?.%s6;Ou?\<?%qZ_Q[_D[Zb/2jBl(O5](22"+ng$Sb>/.P,+
%i9`t%?QT*FT_DMImd!kkZ6I:hs*i<FCd0&QV@1%9f7fd,!MQ"?4+09mYVI#FJHmoppm"[F]Hn0KpO\gV9j\^IiT%p^Fc4Uj-'D(,
%,>.R`;T!T*RncI(A'Y?gEA]AY^-`Bs#sg3DV]q2C_F"NN^Hf4]k[RCEJHU$<-4#M(n6#q$b&7_`D1q6mV-lAP5$j%H0igI)<d"10
%g\#5ke+j!F-;$D?KYB>AqMS,Of$H(Xr6s,CLK%@[X_U4,7bIF<rU74N1;Ah##nlctTHi!*.\Cl7^$ZP98qs6,o"EN:!4XYE9Of8>
%qK9U@&Y;JU.B=]c`p;04os*BqE5Yl?MO'rSn;@?u*oRP9_bK7A:*l(JT6>P;r8-g_!55*<qItK"iE+q3T!AgtO:T7U,?]8sW5[3U
%)hZJc-,c8nd^GJ>'-VcGnCrf!nnG#M==8^Ye#)`!Wc$FX+S6pO$J\W\E..llHreKn^D@:t/tnG]en$m:AXE"%Y8UiHAMV:U]A4"$
%ZAZU<])R#9_JdJD"AN+FkTPPg2Tohos8Mb&6->OGKj?%T<-Hqk="nI%+0FmQIkN#j*\WWSs+1h3D]=,2iAjVDQP!r&Md%M`St"WL
%S_hPG+Dp8[YLY9i(Ik3*'FMI2W2],=,#,(CZL"sRk?)<)qg2J/U=L+Kl1qer8]h7bP.N9EWU-o9,(-MK'`$'`<O_:@=cs,hrs8]#
%\M0hr\+_keSlF<Q7nW<[YOS1$W_UkNQn&Nq2gEk]):A5C:sA['*d-I8[V4mdLB7=[PKgn/BauS@n=mLmcSj=$!E8[1()a""C:2nu
%]D@C+_)o"M3`9VFbOlCE6)UTtK*RV'Vt]ZY58k&TOT~>
%AI9_PrivateDataEnd
